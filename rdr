#!/usr/bin/env node
'use strict'

require('./scripts/map-args')()
var fs = require('fs')
var v = '  v' + require('./package.json').version
var bash = require('child_process').execSync
var backup = require('./scripts/backup')
var configureHost = require('./scripts/configure-host')
var configurePort = require('./scripts/configure-port')
var parseRule = require('./scripts/parse-rule')
var on = require('./scripts/on')
var off = require('./scripts/off')
bash('sh ./scripts/mkdirs.sh')

// ERROR MESSAGES --------------------------------------------------------------
var INVALID_SRC_PORT = ''+
  'A source port is required (you probably meant 80).\n'
var INVALID_DEST_PORT = ''+
  'A destination port is required (you probably want a port 3000-3099).\n'
var INVALID_SRC_HOST = ''+
  'You must specify a source host.\n'
var INVALID_DEST_IP = ''+
  'You must forward traffic to an IP address.\n'
// -----------------------------------------------------------------------------

/**
 * Parses the arguments and passes them to the functions that do the config work.
 * @function
 * @param {String} $1
 * @param {String} $3
 * @return {}
 */
function newRule($1, $3) {
  var rule = parseRule($1, $3)
  var mappedIp = configureHost(rule.srcHost)
  configurePort(mappedIp, rule)
}

/**
 * Reports everything that's being forwarded.
 * @function
 * @return {}
 */
function list() {
  var anchors = fs.readFileSync(__dirname + '/configuration/anchors.json', 'utf8')
  var hosts = fs.readFileSync(__dirname + '/configuration/hosts.json', 'utf8')
  if (!anchors || anchors === '[]') {
    process.stdout.write('\n' + '  No port rules configured.' + '\n')
  } else {
    process.stdout.write('\n' + anchors + '\n')
  }
  if (!hosts || hosts === '[]') {
    process.stdout.write('\n' + '  No host rules configured.' + '\n')
  } else {
    process.stdout.write('\n' + hosts + '\n')
  }
  process.stdout.write('\n')
}

function loadConf() {
  backup()
  try {
    var conf = fs.readFileSync('./.rdr', 'utf8')
      .split('\n')
      .filter(function (line) {
        return line.length && !/^\s*#/.test(line)
      })
  } catch (err) {
    process.stderr.write(err.stack)
    process.exit(1)
  }
  off()
  conf.forEach(function (rule) {
    rule = rule.split(/\s+to\s+/)
    newRule(rule[0], rule[1])
  })
  on()
}

function reset() {
  fs.writeFileSync('/usr/local/lib/rdr/configuration/anchors.json', '[]')
  fs.writeFileSync('/usr/local/lib/rdr/configuration/hosts.json', '[]')
  fs.writeFileSync('/etc/pf.anchors/rdr', '')
  off()
}

/**
 * IIFE to process the arguments.
 * @function
 * @return {}
 */
;(function () {
  if ($1 === '.') loadConf()
  if ($1 === 'on') on()
  if ($1 === 'off') off()
  if ($1 === 'list') list()
  if ($1 === 'reset') reset()
  if ($1 === '--version') {
    process.stderr.write('\n'+v+'\n\n')
  }
  if (!$1 || $1 === '--help') {
    process.stdout.write('\n'+fs.readFileSync('help.txt', 'utf8')+'\n')
  }
  if ($1 && $3) {
    backup()
    newRule($1, $3)
  }
}())
